import { loopbackJsonRemote } from "renraku/x/remote/loopback-json-remote.js";
import { noServeletLogger } from "renraku/x/servelet/logger/no-servelet-logger.js";
import { makeJsonHttpServelet } from "renraku/x/servelet/make-json-http-servelet.js";
import { prepareApiShape } from "../auth/prepare-api-shape.js";
import { logAllCalls } from "../../../framework/log-all-calls.js";
import { addMockLatency } from "../../../framework/add-mock-latency.js";
export function mockRemote({ api, appId, origin, apiLink, latency, storage, }) {
    const { shape, installAuthMediator } = prepareApiShape({
        appId,
        storage,
    });
    const remote = logAllCalls({
        // logger: new DisabledLogger(),
        logger: console,
        fullyDebug: false,
        remote: addMockLatency({
            latency,
            remote: loopbackJsonRemote({
                shape,
                link: apiLink,
                headers: { origin },
                servelet: makeJsonHttpServelet(api, noServeletLogger()),
            }),
        }),
    });
    const authMediator = installAuthMediator({
        greenService: remote.auth.greenService,
    });
    return { remote, authMediator };
}
//# sourceMappingURL=mock-remote.js.map