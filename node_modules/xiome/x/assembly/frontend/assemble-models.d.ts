import { AssembleModelsOptions } from "./types/assemble-models-options.js";
export declare function assembleModels({ appId, remote, popups, storage, authMediator, }: AssembleModelsOptions): Promise<{
    appModel: {
        readonly state: {
            active: boolean;
            appRecords: import("../../framework/ops.js").Op<import("../../features/auth/models/types/app/app-records.js").AppRecords>;
            addingNewApp: import("../../framework/ops.js").Op<null>;
        };
        getApp(appId: string): import("../../features/auth/types/apps/app-display.js").AppDisplay;
        onStateChange: import("../../toolbox/pubsub.js").Subscribe<import("../../toolbox/pubsub.js").AnyListener>;
        loadApps: () => Promise<import("../../features/auth/types/apps/app-display.js").AppDisplay[]>;
        deleteApp: (appId: string) => Promise<void>;
        updateApp: (appId: string, appDraft: import("../../features/auth/types/apps/app-draft.js").AppDraft) => Promise<void>;
        registerApp: (appDraft: import("../../features/auth/types/apps/app-draft.js").AppDraft) => Promise<import("../../features/auth/types/apps/app-display.js").AppDisplay>;
        manageAdminsService: import("renraku/x/types/primitives/business").Business<{
            listAdmins(auth: import("../../features/auth/policies/types/app-owner-auth.js").AppOwnerAuth, { appId }: {
                appId: string;
            }): Promise<import("../../features/auth/types/manage-admins/admin-email-display.js").AdminEmailDisplay[]>;
            assignPlatformUserAsAdmin(auth: import("../../features/auth/policies/types/app-owner-auth.js").AppOwnerAuth, { appId, platformUserId }: {
                appId: string;
                platformUserId: string;
            }): Promise<void>;
            assignAdmin(auth: import("../../features/auth/policies/types/app-owner-auth.js").AppOwnerAuth, { appId, email }: {
                appId: string;
                email: string;
            }): Promise<void>;
            revokeAdmin(auth: import("../../features/auth/policies/types/app-owner-auth.js").AppOwnerAuth, { appId, userId }: {
                appId: string;
                userId: string;
            }): Promise<void>;
        }>;
        accessChange(): Promise<void>;
    };
    authModel: {
        track: <X>(stakeout: import("../../toolbox/autowatcher/types/autowatcher-types.js").Stakeout<X>) => () => void;
        readonly access: import("../../framework/ops.js").Op<import("../../features/auth/types/tokens/access-payload.js").AccessPayload>;
        onAccessChange: import("../../toolbox/pubsub.js").Subscribe<import("../../features/auth/mediator/types/access-event-listener.js").AccessEventListener>;
        getValidAccess(): Promise<import("../../features/auth/types/tokens/access-payload.js").AccessPayload>;
        useExistingLogin(): Promise<void>;
        sendLoginLink(email: string): Promise<void>;
        login(loginToken: string): Promise<void>;
        logout(): Promise<void>;
        reauthorize(): Promise<void>;
    };
    personalModel: {
        readonly submitDraftOp: import("../../framework/ops.js").Op<void>;
        saveProfile(profileDraft: import("../../features/auth/topics/personal/types/profile-draft.js").ProfileDraft): Promise<void>;
    };
    questionsModel: {
        onStateChange: import("../../toolbox/pubsub.js").Subscribe<import("../../toolbox/pubsub.js").AnyListener>;
        makeBoardModel: (board: string) => {
            getPermissions(): {
                "read questions": boolean;
                "post questions": boolean;
                "moderate questions": boolean;
            };
            getBoardName(): string;
            getAccess(): import("../../features/auth/types/tokens/access-payload.js").AccessPayload;
            getBoardOp(): import("../../framework/ops.js").Op<void>;
            getPostingOp(): import("../../framework/ops.js").Op<void>;
            getQuestions(): import("../../features/questions/api/types/question.js").Question[];
            getUser(userId: string): import("../../features/auth/types/user.js").User;
            loadQuestions(): Promise<void>;
            postQuestion(questionDraft: import("../../features/questions/api/types/question-draft.js").QuestionDraft): Promise<void>;
            likeQuestion(questionId: string, like: boolean): Promise<void>;
            reportQuestion(questionId: string, report: boolean): Promise<void>;
            archiveQuestion(questionId: string, archive: boolean): Promise<void>;
            archiveBoard(): Promise<void>;
        };
        accessChange: (access: import("../../features/auth/types/tokens/access-payload.js").AccessPayload) => void;
    };
    permissionsModel: {
        onStateChange: import("../../toolbox/pubsub.js").Subscribe<import("../../toolbox/pubsub.js").AnyListener>;
        getState: () => {
            active: boolean;
            access: import("../../features/auth/types/tokens/access-payload.js").AccessPayload;
            permissionsDisplay: import("../../framework/ops.js").Op<import("../../features/auth/topics/permissions/types/permissions-display.js").PermissionsDisplay>;
        };
        initialize: () => Promise<void>;
        getUserCanCustomizePermissions: () => boolean;
        createRole: (args_0: {
            label: string;
        }) => Promise<void>;
        deleteRole: (args_0: {
            roleId: string;
        }) => Promise<void>;
        assignPrivilege: (args_0: {
            roleId: string;
            privilegeId: string;
        }) => Promise<void>;
        unassignPrivilege: (args_0: {
            roleId: string;
            privilegeId: string;
        }) => Promise<void>;
        accessChange(access: import("../../features/auth/types/tokens/access-payload.js").AccessPayload): Promise<void>;
    };
    administrativeModel: {
        getState: () => {
            access: import("../../features/auth/types/tokens/access-payload.js").AccessPayload;
            permissionsOp: import("../../framework/ops.js").Op<import("../../features/auth/topics/permissions/types/permissions-display.js").PermissionsDisplay>;
        };
        onStateChange: import("../../toolbox/pubsub.js").Subscribe<import("../../toolbox/pubsub.js").AnyListener>;
        initialize: () => Promise<void>;
        readonly isAllowed: (privilege: "read questions" | "post questions" | "like questions" | "report questions" | "edit any profile" | "customize permissions" | "moderate questions" | "view stats" | "administrate user roles" | "banned" | "manage store" | "give away freebies") => boolean;
        accessChange: (access: import("../../features/auth/types/tokens/access-payload.js").AccessPayload) => void;
        reauthorize: () => Promise<void>;
        searchUsers: (args_0: {
            term: string;
        }) => Promise<{
            user: {
                userId: string;
                profile: import("../../features/auth/types/profile.js").Profile;
                roles: import("../../features/auth/types/public-user-role.js").PublicUserRole[];
                stats: import("../../features/auth/types/user-stats.js").UserStats;
            };
            roleIds: string[];
        }[]>;
        assignRoleToUser: (args_0: {
            roleId: string;
            userId: string;
            isPublic: boolean;
            timeframeEnd: number;
            timeframeStart: number;
        }) => Promise<void>;
        revokeRoleFromUser: (args_0: {
            roleId: string;
            userId: string;
        }) => Promise<void>;
    };
}>;
