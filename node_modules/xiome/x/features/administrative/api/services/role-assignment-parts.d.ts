import { UserAuth } from "../../../auth/policies/types/user-auth.js";
import { UserMeta } from "../../../auth/policies/types/user-meta.js";
import { AdministrativeApiOptions } from "../types/administrative-api-options.js";
export declare const roleAssignmentParts: ({ config, authPolicies, }: AdministrativeApiOptions) => {
    policy: (meta: UserMeta, request: import("renraku/x/types/http/http-request").HttpRequest) => Promise<UserAuth>;
    expose: {
        fetchPermissions({ tables, access }: UserAuth): Promise<import("../../../../toolbox/concurrent.js").AwaitProps<{
            roles: Promise<import("../../../auth/tables/types/rows/role-row.js").RoleRow[]>;
            privileges: Promise<import("../../../auth/tables/types/rows/privilege-row.js").PrivilegeRow[]>;
            rolesHavePrivileges: Promise<import("../../../auth/tables/types/rows/role-has-privilege-row.js").RoleHasPrivilegeRow[]>;
        }>>;
        searchUsers({ tables, access }: UserAuth, options: {
            term: string;
        }): Promise<{
            user: {
                userId: string;
                profile: import("../../../auth/types/profile.js").Profile;
                roles: import("../../../auth/types/public-user-role.js").PublicUserRole[];
                stats: import("../../../auth/types/user-stats.js").UserStats;
            };
            roleIds: string[];
        }[]>;
        assignRoleToUser({ tables }: UserAuth, options: {
            roleId: string;
            userId: string;
            isPublic: boolean;
            timeframeEnd: undefined | number;
            timeframeStart: undefined | number;
        }): Promise<void>;
        revokeRoleFromUser({ tables }: UserAuth, options: {
            roleId: string;
            userId: string;
        }): Promise<void>;
    };
};
