import { ops } from "../../../framework/ops.js";
import { happystate } from "../../../toolbox/happystate/happystate.js";
import { appPermissions } from "../../../assembly/backend/permissions2/standard-permissions.js";
import { makeAllowanceChecker } from "../../../assembly/backend/permissions2/tools/make-allowance-checker.js";
export function makeAdministrativeModel({ roleAssignmentService, reauthorize, }) {
    const { actions, getState, onStateChange } = happystate({
        state: {
            access: undefined,
            permissionsOp: ops.none(),
        },
        actions: state => ({
            setAccess(access) {
                state.access = access;
            },
            setPermissionsOp(op) {
                state.permissionsOp = op;
            },
        }),
    });
    let initializedInDom = false;
    function allowanceChecker() {
        return makeAllowanceChecker(getState().access, appPermissions.privileges);
    }
    async function loadPermissions() {
        if (initializedInDom && allowanceChecker()("administrate user roles"))
            await ops.operation({
                promise: roleAssignmentService.fetchPermissions(),
                setOp: actions.setPermissionsOp,
            });
    }
    async function initialize() {
        initializedInDom = true;
        await loadPermissions();
    }
    return {
        getState,
        onStateChange,
        initialize,
        get isAllowed() {
            return allowanceChecker();
        },
        accessChange: (access) => {
            actions.setAccess(access);
            loadPermissions();
        },
        reauthorize,
        searchUsers: roleAssignmentService.searchUsers,
        assignRoleToUser: roleAssignmentService.assignRoleToUser,
        revokeRoleFromUser: roleAssignmentService.revokeRoleFromUser,
    };
}
//# sourceMappingURL=administrative-model.js.map