import { Op } from "../../../framework/ops.js";
import { AccessPayload } from "../../auth/types/tokens/access-payload.js";
import { GetBusiness } from "../../../framework/api/types/get-business.js";
import { roleAssignmentParts } from "../api/services/role-assignment-parts.js";
import { PermissionsDisplay } from "../../auth/topics/permissions/types/permissions-display.js";
export declare function makeAdministrativeModel({ roleAssignmentService, reauthorize, }: {
    roleAssignmentService: GetBusiness<typeof roleAssignmentParts>;
    reauthorize: () => Promise<void>;
}): {
    getState: () => {
        access: AccessPayload;
        permissionsOp: Op<PermissionsDisplay>;
    };
    onStateChange: import("../../../toolbox/pubsub.js").Subscribe<import("../../../toolbox/pubsub.js").AnyListener>;
    initialize: () => Promise<void>;
    readonly isAllowed: (privilege: "read questions" | "post questions" | "like questions" | "report questions" | "edit any profile" | "customize permissions" | "moderate questions" | "view stats" | "administrate user roles" | "banned" | "manage store" | "give away freebies") => boolean;
    accessChange: (access: AccessPayload) => void;
    reauthorize: () => Promise<void>;
    searchUsers: (args_0: {
        term: string;
    }) => Promise<{
        user: {
            userId: string;
            profile: import("../../auth/types/profile.js").Profile;
            roles: import("../../auth/types/public-user-role.js").PublicUserRole[];
            stats: import("../../auth/types/user-stats.js").UserStats;
        };
        roleIds: string[];
    }[]>;
    assignRoleToUser: (args_0: {
        roleId: string;
        userId: string;
        isPublic: boolean;
        timeframeEnd: number;
        timeframeStart: number;
    }) => Promise<void>;
    revokeRoleFromUser: (args_0: {
        roleId: string;
        userId: string;
    }) => Promise<void>;
};
