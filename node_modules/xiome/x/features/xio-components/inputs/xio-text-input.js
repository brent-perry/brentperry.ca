var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import styles from "./xio-text-input.css.js";
import { noopParser } from "./parsing/noop-parser.js";
import { EnterPressEvent } from "./events/enter-press.js";
import { ValueChangeEvent } from "./events/value-change-event.js";
import { Component2, html, mixinStyles, mixinFocusable, property, query } from "../../../framework/component2/component2.js";
import svgWarning from "../../../framework/icons/warning.svg.js";
import svgCircleCheck from "../../../framework/icons/circle-check.svg.js";
let XioTextInput = class XioTextInput extends Component2 {
    constructor() {
        super(...arguments);
        this["initial"] = "";
        this["readonly"] = false;
        this["textarea"] = false;
        this["hide-validation"] = false;
        this["show-validation-when-empty"] = false;
        this["disabled"] = false;
        this["placeholder"] = "";
        this["hidden"] = false;
        this.parser = noopParser;
        this.problems = [];
        this.onvaluechange = () => { };
        this.onenterpress = () => { };
        this.draft = "";
        this.lastDraft = "";
        this.dispatchValueChange = () => {
            const { draft, lastDraft } = this;
            if (draft !== lastDraft)
                this.dispatchEvent(new ValueChangeEvent(this.value));
            this.lastDraft = draft;
        };
        this.dispatchEnterPress = () => {
            this.dispatchEvent(new EnterPressEvent());
        };
        this.updateFromRawInput = () => {
            this.draft = this.input.value;
        };
        this.handleInputKeyUp = (event) => {
            this.updateFromRawInput();
            if (!this.textarea && event.key === "Enter") {
                this.dispatchEnterPress();
            }
            else {
                this.dispatchValueChange();
            }
        };
        this.handleInputChange = () => {
            this.updateFromRawInput();
            this.dispatchValueChange();
        };
    }
    focus() {
        this.shadowRoot.querySelector("#textinput").focus();
    }
    get value() {
        const { draft } = this;
        const parsed = (this.parser ?? noopParser)(draft);
        this.problems = this.validator ? this.validator(parsed) : [];
        return this.problems.length === 0
            ? parsed
            : undefined;
    }
    get text() {
        return this.draft;
    }
    set text(value) {
        const { input } = this;
        if (input) {
            this.input.value = value;
            this.updateFromRawInput();
        }
        else {
            this.initial = value;
        }
    }
    init() {
        this.draft = this.initial;
        this.addEventListener("valuechange", this.onvaluechange);
        this.addEventListener("enterpress", this.onenterpress);
    }
    render() {
        const { readonly, disabled, problems, draft, placeholder, textarea, validator, handleInputKeyUp, handleInputChange, } = this;
        const valid = problems.length === 0;
        const showValidation = !this["hide-validation"] && !readonly && validator && (this["show-validation-when-empty"]
            ? true
            : draft.length !== 0);
        const showProblems = showValidation && !valid;
        const icon = showValidation
            ? valid
                ? svgCircleCheck
                : svgWarning
            : null;
        return html `
			<div class=container ?data-valid=${valid}>
				<label for=textinput part=label><slot></slot></label>
				<div class=flexy>
					<div class=inputbox part=inputbox>
						${showValidation ? icon : null}
						${textarea ? html `
							<textarea
								id=textinput
								part=textinput
								.value="${draft}"
								?disabled=${disabled}
								?readonly=${readonly}
								tabindex=${readonly ? "-1" : "0"}
								placeholder=${placeholder}
								@keyup=${handleInputKeyUp}
								@change=${handleInputChange}
							></textarea>
						` : html `
							<input
								id=textinput
								type=text
								part=textinput
								.value="${draft}"
								?disabled=${disabled}
								?readonly=${readonly}
								tabindex=${readonly ? "-1" : "0"}
								placeholder=${placeholder}
								@keyup=${handleInputKeyUp}
								@change=${handleInputChange}
								/>
						`}
					</div>
					<ol class=problems part=problems>
						${showProblems
            ? problems.map(problem => html `
								<li>${problem}</li>
							`)
            : null}
					</ol>
				</div>
			</div>
		`;
    }
};
__decorate([
    property({ type: String, reflect: true })
], XioTextInput.prototype, "initial", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], XioTextInput.prototype, "readonly", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], XioTextInput.prototype, "textarea", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], XioTextInput.prototype, "hide-validation", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], XioTextInput.prototype, "show-validation-when-empty", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], XioTextInput.prototype, "disabled", void 0);
__decorate([
    property({ type: String, reflect: true })
], XioTextInput.prototype, "placeholder", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], XioTextInput.prototype, "hidden", void 0);
__decorate([
    property({ type: Function })
], XioTextInput.prototype, "parser", void 0);
__decorate([
    property({ type: Function })
], XioTextInput.prototype, "validator", void 0);
__decorate([
    property({ type: Object })
], XioTextInput.prototype, "problems", void 0);
__decorate([
    query("#textinput")
], XioTextInput.prototype, "input", void 0);
__decorate([
    property({ type: String })
], XioTextInput.prototype, "draft", void 0);
XioTextInput = __decorate([
    mixinFocusable,
    mixinStyles(styles)
], XioTextInput);
export { XioTextInput };
//# sourceMappingURL=xio-text-input.js.map