import { User } from "../../auth/types/user.js";
import { Op } from "../../../framework/ops.js";
import { Question } from "../api/types/question.js";
import { QuestionDraft } from "../api/types/question-draft.js";
import { AccessPayload } from "../../auth/types/tokens/access-payload.js";
import { GetBusiness } from "../../../framework/api/types/get-business.js";
import { questionsReadingParts } from "../api/services/questions-reading-parts.js";
import { questionsPostingParts } from "../api/services/questions-posting-parts.js";
import { questionsModerationParts } from "../api/services/questions-moderation-parts.js";
export declare function makeQuestionsModel({ questionsReadingService, questionsPostingService, questionsModerationService, getAccess, }: {
    questionsReadingService: GetBusiness<typeof questionsReadingParts>;
    questionsPostingService: GetBusiness<typeof questionsPostingParts>;
    questionsModerationService: GetBusiness<typeof questionsModerationParts>;
    getAccess: () => Op<AccessPayload>;
}): {
    onStateChange: import("../../../toolbox/pubsub.js").Subscribe<import("../../../toolbox/pubsub.js").AnyListener>;
    makeBoardModel: (board: string) => {
        getPermissions(): {
            "read questions": boolean;
            "post questions": boolean;
            "moderate questions": boolean;
        };
        getBoardName(): string;
        getAccess(): AccessPayload;
        getBoardOp(): Op<void>;
        getPostingOp(): Op<void>;
        getQuestions(): Question[];
        getUser(userId: string): User;
        loadQuestions(): Promise<void>;
        postQuestion(questionDraft: QuestionDraft): Promise<void>;
        likeQuestion(questionId: string, like: boolean): Promise<void>;
        reportQuestion(questionId: string, report: boolean): Promise<void>;
        archiveQuestion(questionId: string, archive: boolean): Promise<void>;
        archiveBoard(): Promise<void>;
    };
    accessChange: (access: AccessPayload) => void;
};
