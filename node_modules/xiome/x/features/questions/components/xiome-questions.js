var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _XiomeQuestions_boardModel;
import styles from "./xiome-questions.css.js";
import { sortQuestions } from "./helpers/sort-questions.js";
import { renderQuestion } from "./parts/render-question.js";
import { renderOp } from "../../../framework/op-rendering/render-op.js";
import { renderQuestionEditor } from "./parts/render-question-editor.js";
import { Component2WithShare, mixinStyles, html, property, query } from "../../../framework/component2/component2.js";
let XiomeQuestions = class XiomeQuestions extends Component2WithShare {
    constructor() {
        super(...arguments);
        _XiomeQuestions_boardModel.set(this, void 0);
        this.board = "default";
        this.draftText = "";
        this.handlePost = async (event) => {
            const content = this.draftText;
            this.editorTextInput.text = "";
            await __classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f").postQuestion({
                content,
                board: __classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f").getBoardName(),
            });
        };
        this.handleValueChange = (event) => {
            this.draftText = event.detail.value;
        };
    }
    get postable() {
        return !!this.draftText;
    }
    init() {
        __classPrivateFieldSet(this, _XiomeQuestions_boardModel, this.share.questionsModel.makeBoardModel(this.board), "f");
        __classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f").loadQuestions();
    }
    renderQuestionsModerationPanel() {
        const permissions = __classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f").getPermissions();
        const board = __classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f").getBoardName();
        const handlePressPurgeButton = async () => {
            const confirmed = await this.share.modals.confirm({
                title: `Purge questions?`,
                body: `Are you sure you want to delete all the questions on the board "${board}"? This cannot be undone.`,
                yes: { vibe: "negative", label: "Purge all" },
                no: { vibe: "neutral", label: "Nevermind" },
                focusNthElement: 2,
            });
            if (confirmed)
                await __classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f").archiveBoard();
        };
        return permissions["moderate questions"]
            ? html `
				<div class=questions-moderation-panel>
					<h3>moderate questions board "${this.board}"</h3>
					<xio-button
						class=purge-button
						@press=${handlePressPurgeButton}>
							Purge all questions
					</xio-button>
				</div>
			`
            : null;
    }
    renderQuestionsEditor() {
        const access = __classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f").getAccess();
        const permissions = __classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f").getPermissions();
        const questionAuthor = access?.user;
        return permissions["post questions"]
            ? renderOp(__classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f").getPostingOp(), () => renderQuestionEditor({
                questionAuthor,
                content: this.draftText,
                postable: this.postable,
                handlePost: this.handlePost,
                handleValueChange: this.handleValueChange,
            }))
            : null;
    }
    renderQuestionsList() {
        const access = __classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f").getAccess();
        const myUserId = access?.user?.userId;
        const questions = sortQuestions(__classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f").getQuestions(), myUserId);
        const permissions = __classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f").getPermissions();
        return html `
			<ol class=questionslist>
				${questions.map(question => {
            const { questionId, authorUserId } = question;
            const author = __classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f").getUser(authorUserId);
            const isAuthor = (access && access.user)
                ? access.user.userId === author.userId
                : false;
            const authority = permissions["moderate questions"] || isAuthor;
            const handleDelete = async () => {
                const confirmed = await this.share.modals.confirm({
                    title: "Delete question?",
                    body: "Are you sure you want to delete this question? This cannot be undone.",
                    yes: { vibe: "negative", label: "Delete question" },
                    no: { vibe: "neutral", label: "Nevermind" },
                    focusNthElement: 2,
                });
                if (confirmed)
                    await __classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f").archiveQuestion(questionId, true);
            };
            const handleLike = (like) => {
                __classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f").likeQuestion(questionId, like);
            };
            const handleReport = async (report) => {
                const confirmed = report
                    ? await this.share.modals.confirm({
                        title: "Report question?",
                        body: "Are you sure you want to submit a report against this question?",
                        yes: { vibe: "negative", label: "Submit report" },
                        no: { vibe: "neutral", label: "Nevermind" },
                        focusNthElement: 2,
                    })
                    : true;
                if (confirmed)
                    await __classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f").reportQuestion(questionId, report);
            };
            return renderQuestion({
                author,
                authority,
                question,
                handleDelete,
                handleLike,
                handleReport,
            });
        })}
			</ol>
		`;
    }
    renderQuestionsBoard() {
        const boardOp = __classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f").getBoardOp();
        const numberOfQuestions = __classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f").getQuestions().length;
        return renderOp(boardOp, () => html `
			${this.renderQuestionsModerationPanel()}
			${this.renderQuestionsEditor()}
			${numberOfQuestions > 0
            ? this.renderQuestionsList()
            : html `<slot name=empty><p>Be the first to post a question!</p></slot>`}
		`);
    }
    render() {
        return __classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f") && __classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f").getBoardOp()
            ? this.renderQuestionsBoard()
            : null;
    }
};
_XiomeQuestions_boardModel = new WeakMap();
__decorate([
    property({ type: String, reflect: true })
], XiomeQuestions.prototype, "board", void 0);
__decorate([
    property({ type: String })
], XiomeQuestions.prototype, "draftText", void 0);
__decorate([
    query(".question-editor .question-body xio-text-input")
], XiomeQuestions.prototype, "editorTextInput", void 0);
XiomeQuestions = __decorate([
    mixinStyles(styles)
], XiomeQuestions);
export { XiomeQuestions };
//# sourceMappingURL=xiome-questions.js.map