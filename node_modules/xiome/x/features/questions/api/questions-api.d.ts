import { QuestionsApiOptions } from "./types/questions-api-options.js";
export declare function questionsApi(options: QuestionsApiOptions): {
    questionsReadingService: import("renraku/x/types/api/to-api-context").ToApiContext<import("../../auth/policies/types/anon-meta.js").AnonMeta, import("../../auth/policies/types/anon-auth.js").AnonAuth & {
        questionsTables: import("./tables/types/questions-tables.js").QuestionsTables;
    }, {
        fetchQuestions({ questionsTables, tables, access }: import("./types/questions-auth-parts.js").QuestionsAuthParts & import("../../auth/policies/types/anon-auth.js").AnonAuth, { board }: {
            board: string;
        }): Promise<{
            questions: any[];
            users: any[];
        }>;
    }, {
        processAuth: (meta: import("../../auth/policies/types/anon-meta.js").AnonMeta, request: import("renraku/x/types/http/http-request").HttpRequest) => Promise<import("../../auth/policies/types/anon-auth.js").AnonAuth & {
            questionsTables: import("./tables/types/questions-tables.js").QuestionsTables;
        }>;
    }>;
    questionsPostingService: import("renraku/x/types/api/to-api-context").ToApiContext<import("../../auth/policies/types/user-meta.js").UserMeta, import("../../auth/policies/types/user-auth.js").UserAuth & {
        questionsTables: import("./tables/types/questions-tables.js").QuestionsTables;
    }, {
        postQuestion({ questionsTables, access, checker }: import("./types/questions-auth-parts.js").QuestionsAuthParts & import("../../auth/policies/types/user-auth.js").UserAuth, { questionDraft }: {
            questionDraft: import("./types/question-draft.js").QuestionDraft;
        }): Promise<import("./types/question.js").Question>;
        archiveQuestion({ access: { user: { userId } }, questionsTables, checker }: import("./types/questions-auth-parts.js").QuestionsAuthParts & import("../../auth/policies/types/user-auth.js").UserAuth, { questionId, archive }: {
            archive: boolean;
            questionId: string;
        }): Promise<void>;
        likeQuestion({ questionsTables, checker, access: { user: { userId } } }: import("./types/questions-auth-parts.js").QuestionsAuthParts & import("../../auth/policies/types/user-auth.js").UserAuth, { questionId, like }: {
            questionId: string;
            like: boolean;
        }): Promise<void>;
        reportQuestion({ questionsTables, checker, access: { user: { userId } } }: import("./types/questions-auth-parts.js").QuestionsAuthParts & import("../../auth/policies/types/user-auth.js").UserAuth, { questionId, report }: {
            questionId: string;
            report: boolean;
        }): Promise<void>;
    }, {
        processAuth: (meta: import("../../auth/policies/types/user-meta.js").UserMeta, request: import("renraku/x/types/http/http-request").HttpRequest) => Promise<import("../../auth/policies/types/user-auth.js").UserAuth & {
            questionsTables: import("./tables/types/questions-tables.js").QuestionsTables;
        }>;
    }>;
    questionsModerationService: import("renraku/x/types/api/to-api-context").ToApiContext<import("../../auth/policies/types/user-meta.js").UserMeta, import("../../auth/policies/types/user-auth.js").UserAuth & {
        questionsTables: import("./tables/types/questions-tables.js").QuestionsTables;
    }, {
        archiveBoard({ questionsTables }: import("./types/questions-auth-parts.js").QuestionsAuthParts & import("../../auth/policies/types/user-auth.js").UserAuth, { board }: {
            board: string;
        }): Promise<void>;
    }, {
        processAuth: (meta: import("../../auth/policies/types/user-meta.js").UserMeta, request: import("renraku/x/types/http/http-request").HttpRequest) => Promise<import("../../auth/policies/types/user-auth.js").UserAuth & {
            questionsTables: import("./tables/types/questions-tables.js").QuestionsTables;
        }>;
    }>;
};
