import { Question } from "../types/question.js";
import { QuestionDraft } from "../types/question-draft.js";
import { UserMeta } from "../../../auth/policies/types/user-meta.js";
import { UserAuth } from "../../../auth/policies/types/user-auth.js";
import { QuestionsAuthParts } from "../types/questions-auth-parts.js";
import { QuestionsApiOptions } from "../types/questions-api-options.js";
export declare const questionsPostingParts: (options: QuestionsApiOptions) => {
    policy: (meta: UserMeta, request: import("renraku/x/types/http/http-request").HttpRequest) => Promise<UserAuth & {
        questionsTables: import("../tables/types/questions-tables.js").QuestionsTables;
    }>;
    expose: {
        postQuestion({ questionsTables, access, checker }: QuestionsAuthParts & UserAuth, { questionDraft }: {
            questionDraft: QuestionDraft;
        }): Promise<Question>;
        archiveQuestion({ access: { user: { userId } }, questionsTables, checker }: QuestionsAuthParts & UserAuth, { questionId, archive }: {
            archive: boolean;
            questionId: string;
        }): Promise<void>;
        likeQuestion({ questionsTables, checker, access: { user: { userId } } }: QuestionsAuthParts & UserAuth, { questionId, like }: {
            questionId: string;
            like: boolean;
        }): Promise<void>;
        reportQuestion({ questionsTables, checker, access: { user: { userId } } }: QuestionsAuthParts & UserAuth, { questionId, report }: {
            questionId: string;
            report: boolean;
        }): Promise<void>;
    };
};
