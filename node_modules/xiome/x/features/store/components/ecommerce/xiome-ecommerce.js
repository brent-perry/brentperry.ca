var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import styles from "./xiome-ecommerce.css.js";
import { StoreStatus } from "../../topics/types/store-status.js";
import { renderOp } from "../../../../framework/op-rendering/render-op.js";
import { Component2WithShare, mixinStyles, html } from "../../../../framework/component2/component2.js";
let XiomeEcommerce = class XiomeEcommerce extends Component2WithShare {
    init() {
        this.share.ecommerce.initialize();
    }
    renderStoreManagement() {
        const { ecommerce } = this.share;
        return renderOp(ecommerce.storeStatus, storeStatus => {
            switch (storeStatus) {
                case StoreStatus.Uninitialized:
                    return html `<p>store uninitialized</p>`;
                case StoreStatus.Unlinked:
                    return html `<p>store banking info not linked</p>`;
                default:
                    const enabled = storeStatus === StoreStatus.Enabled;
                    async function save(checked) {
                        return checked
                            ? ecommerce.enableEcommerce()
                            : ecommerce.disableEcommerce();
                    }
                    return html `
						<p>store is configured properly</p>
						<p>
							<xio-checkbox
								?initially-checked=${enabled}
								.save=${save}
							></xio-checkbox>
							Ecommerce active
						</p>
					`;
            }
        });
    }
    render() {
        const { ecommerce } = this.share;
        return ecommerce.userCanManageStore
            ? this.renderStoreManagement()
            : html `
				<p>you are not privileged to manage the store</p>
			`;
    }
};
XiomeEcommerce = __decorate([
    mixinStyles(styles)
], XiomeEcommerce);
export { XiomeEcommerce };
//# sourceMappingURL=xiome-ecommerce.js.map