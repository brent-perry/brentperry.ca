var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import styles from "./xiome-bank-connect.css.js";
import { onesie } from "../../../../toolbox/onesie.js";
import { ops } from "../../../../framework/ops.js";
import { renderOp } from "../../../../framework/op-rendering/render-op.js";
import { Component2WithShare, mixinStyles, html, property } from "../../../../framework/component2/component2.js";
let XiomeBankConnect = class XiomeBankConnect extends Component2WithShare {
    constructor() {
        super(...arguments);
        this.stripeAccountDetails = ops.loading();
        this.refreshStripeAccountDetails = onesie(async () => {
            if (this.appId) {
                ops.operation({
                    setOp: op => this.stripeAccountDetails = op,
                    promise: this.share.bank.getStripeAccountDetails(this.appId)
                        .then(details => {
                        this.requestUpdate();
                        return details;
                    }),
                });
            }
            else {
                const errorReason = "missing appId for xiome-bank-connect";
                this.stripeAccountDetails = ops.error(errorReason);
                console.warn(errorReason);
            }
        });
    }
    async init() {
        await this.refreshStripeAccountDetails();
    }
    // TODO implement
    async clickSetupPayouts() {
        await this.share.bank.setupStripeAccount(this.appId);
        await this.refreshStripeAccountDetails();
    }
    renderCreateOrEditAccount() {
        return html `
			<div>
				<xio-button @press=${this.clickSetupPayouts}>setup payouts</xio-button>
			</div>
		`;
    }
    renderDetails(details) {
        return html `
			<p>stripe email: ${details.email}</p>
			<p>stripe account id: <xio-id id=${details.stripeAccountId}></xio-id></p>
			<p>details submitted: ${details.details_submitted}</p>
			<p>payouts enabled: ${details.payouts_enabled}</p>
			${this.renderCreateOrEditAccount()}
		`;
    }
    renderNoAccount() {
        return html `
			<p>no banking info linked</p>
			${this.renderCreateOrEditAccount()}
		`;
    }
    render() {
        return renderOp(this.stripeAccountDetails, details => details
            ? this.renderDetails(details)
            : this.renderNoAccount());
    }
};
__decorate([
    property({ type: String, reflect: true })
], XiomeBankConnect.prototype, "appId", void 0);
__decorate([
    property({ type: Object })
], XiomeBankConnect.prototype, "stripeAccountDetails", void 0);
XiomeBankConnect = __decorate([
    mixinStyles(styles)
], XiomeBankConnect);
export { XiomeBankConnect };
//# sourceMappingURL=xiome-bank-connect.js.map