import { Service } from "../../../types/service.js";
import { shopkeepingTopic } from "../topics/shopkeeping-topic.js";
import { statusCheckerTopic } from "../topics/status-checker-topic.js";
import { statusTogglerTopic } from "../topics/status-toggler-topic.js";
import { stripeConnectTopic } from "../topics/stripe-connect-topic.js";
import { TriggerBankPopup } from "./shares/types/trigger-bank-popup.js";
import { AccessPayload } from "../../auth/types/tokens/access-payload.js";
import { FlexStorage } from "../../../toolbox/flex-storage/types/flex-storage.js";
export declare function makeStoreModel({ appId, storage, shopkeepingService, statusCheckerService, statusTogglerService, stripeAccountsService, triggerBankPopup, }: {
    appId: string;
    storage: FlexStorage;
    shopkeepingService: Service<typeof shopkeepingTopic>;
    statusCheckerService: Service<typeof statusCheckerTopic>;
    statusTogglerService: Service<typeof statusTogglerTopic>;
    stripeAccountsService: Service<typeof stripeConnectTopic>;
    triggerBankPopup: TriggerBankPopup;
}): {
    track: <X>(stakeout: import("../../../toolbox/autowatcher/types/autowatcher-types.js").Stakeout<X>) => () => void;
    shares: {
        subscriptionPlanning: {
            accessChange(): Promise<void>;
            readonly access: AccessPayload;
            readonly situation: import("./shares/types/planning-situation.js").PlanningSituation.Any;
            activate: () => Promise<void>;
            createPlan: (draft: import("../api/tables/types/drafts/subscription-plan-draft.js").SubscriptionPlanDraft) => Promise<import("../topics/types/subscription-plan.js").SubscriptionPlan>;
            deactivatePlan: (subscriptionPlanId: string) => Promise<import("../topics/types/subscription-plan.js").SubscriptionPlan[]>;
            deletePlan: (subscriptionPlanId: string) => Promise<import("../topics/types/subscription-plan.js").SubscriptionPlan[]>;
        };
        ecommerce: {
            readonly access: AccessPayload;
            readonly storeStatus: import("../../../framework/ops.js").Op<import("../topics/types/store-status.js").StoreStatus>;
            readonly userCanManageStore: boolean;
            initialize: () => Promise<void>;
            enableEcommerce: () => Promise<void>;
            disableEcommerce: () => Promise<void>;
        };
        bank: {
            readonly access: AccessPayload;
            getStripeAccountDetails(appId: string): Promise<import("../topics/types/stripe-account-details.js").StripeAccountDetails>;
            setupStripeAccount(appId: string): Promise<void>;
        };
    };
    accessChange(access: AccessPayload): Promise<void>;
};
