import { StoreApiOptions } from "./types/store-api-options.js";
import { MerchantAuth } from "./policies/types/contexts/merchant-auth.js";
import { CustomerAuth } from "./policies/types/contexts/customer-auth.js";
import { ProspectAuth } from "./policies/types/contexts/prosect-auth.js";
export declare const storeApi: ({ rando, tables, config, authPolicies, stripeComplex, shoppingOptions, stripeConnectOptions, }: StoreApiOptions) => {
    stripeConnectService: import("renraku/x/types/api/to-api-context").ToApiContext<import("../../auth/policies/types/app-owner-meta.js").AppOwnerMeta, MerchantAuth, {
        getConnectDetails({ access, stripeLiaisonForPlatform, getTablesNamespacedForApp }: MerchantAuth, { appId }: {
            appId: string;
        }): Promise<import("../topics/types/stripe-account-details.js").StripeAccountDetails>;
        generateConnectSetupLink({ access, stripeLiaisonForPlatform, getTablesNamespacedForApp }: MerchantAuth, { appId }: {
            appId: string;
        }): Promise<{
            stripeAccountId: string;
            stripeAccountSetupLink: string;
        }>;
    }, import("renraku/x/types/primitives/policy").Policy<import("../../auth/policies/types/app-owner-meta.js").AppOwnerMeta, MerchantAuth, import("renraku/x/types/http/http-request").HttpRequest>>;
    shopkeepingService: import("renraku/x/types/api/to-api-context").ToApiContext<import("../../auth/policies/types/user-meta.js").UserMeta, CustomerAuth, {
        listSubscriptionPlans({ tables }: CustomerAuth): Promise<import("../topics/types/subscription-plan.js").SubscriptionPlan[]>;
        createSubscriptionPlan({ tables, stripeLiaisonForApp }: CustomerAuth, { draft }: {
            draft: import("./tables/types/drafts/subscription-plan-draft.js").SubscriptionPlanDraft;
        }): Promise<import("../topics/types/subscription-plan.js").SubscriptionPlan>;
        updateSubscriptionPlan({ tables, stripeLiaisonForApp }: CustomerAuth, { subscriptionPlanId, draft }: {
            subscriptionPlanId: string;
            draft: import("./tables/types/drafts/subscription-plan-draft.js").SubscriptionPlanDraft;
        }): Promise<import("../topics/types/subscription-plan.js").SubscriptionPlan>;
        deactivateSubscriptionPlan({ tables, stripeLiaisonForApp }: CustomerAuth, { subscriptionPlanId }: {
            subscriptionPlanId: string;
        }): Promise<void>;
        deleteSubscriptionPlan({ tables }: CustomerAuth, { subscriptionPlanId }: {
            subscriptionPlanId: string;
        }): Promise<void>;
    }, import("renraku/x/types/primitives/policy").Policy<import("../../auth/policies/types/user-meta.js").UserMeta, CustomerAuth, import("renraku/x/types/http/http-request").HttpRequest>>;
    shoppingService: import("renraku/x/types/api/to-api-context").ToApiContext<import("../../auth/policies/types/user-meta.js").UserMeta, CustomerAuth, {
        buySubscription({ tables, stripeLiaisonForApp }: CustomerAuth, { subscriptionPlanId }: {
            subscriptionPlanId: string;
        }): Promise<boolean>;
        updateSubscription({ tables, stripeLiaisonForApp }: CustomerAuth, { subscriptionId }: {
            subscriptionId: string;
        }): Promise<boolean>;
        endSubscription({ tables, stripeLiaisonForApp }: CustomerAuth, { subscriptionId }: {
            subscriptionId: string;
        }): Promise<boolean>;
    }, import("renraku/x/types/primitives/policy").Policy<import("../../auth/policies/types/user-meta.js").UserMeta, CustomerAuth, import("renraku/x/types/http/http-request").HttpRequest>>;
    ecommerce: {
        statusTogglerService: import("renraku/x/types/api/to-api-context").ToApiContext<import("../../auth/policies/types/user-meta.js").UserMeta, CustomerAuth, {
            enableEcommerce({ tables }: CustomerAuth): Promise<void>;
            disableEcommerce({ tables }: CustomerAuth): Promise<void>;
        }, import("renraku/x/types/primitives/policy").Policy<import("../../auth/policies/types/user-meta.js").UserMeta, CustomerAuth, import("renraku/x/types/http/http-request").HttpRequest>>;
        statusCheckerService: import("renraku/x/types/api/to-api-context").ToApiContext<import("../../auth/policies/types/anon-meta.js").AnonMeta, ProspectAuth, {
            getStoreStatus({ tables, access, getStripeAccount }: ProspectAuth): Promise<import("../topics/types/store-status.js").StoreStatus>;
        }, import("renraku/x/types/primitives/policy").Policy<import("../../auth/policies/types/anon-meta.js").AnonMeta, ProspectAuth, import("renraku/x/types/http/http-request").HttpRequest>>;
    };
};
