import { prepareNamespacerForTables } from "../../../auth/tables/baking/generic/prepare-namespacer-for-tables.js";
export function payPolicies({ tables, authPolicies, stripeComplex, }) {
    async function bakePayTables(appId) {
        return {
            billing: await prepareNamespacerForTables(tables.billing)(appId),
            merchant: await prepareNamespacerForTables(tables.merchant)(appId),
        };
    }
    async function commonAuthProcessing(authTables, appId) {
        const tables = { ...authTables, ...await bakePayTables(appId) };
        return { tables };
    }
    /** a merchant owns apps, and links stripe accounts */
    const merchant = {
        async processAuth(meta, request) {
            const auth = await authPolicies.appOwner.processAuth(meta, request);
            const { stripeLiaisonForPlatform } = stripeComplex;
            return {
                ...auth,
                ...await commonAuthProcessing(auth.tables, auth.access.appId),
                stripeLiaisonForPlatform,
                async getTablesNamespacedForApp(appId) {
                    const authTables = await auth.getTablesNamespacedForApp(appId);
                    const payTables = await bakePayTables(appId);
                    return { ...authTables, ...payTables };
                },
            };
        }
    };
    /** a prospect user is checking if ecommerce is available */
    const prospect = {
        async processAuth(meta, request) {
            const auth = await authPolicies.anon.processAuth(meta, request);
            const common = await commonAuthProcessing(auth.tables, auth.access.appId);
            const { stripeLiaisonForPlatform } = stripeComplex;
            async function getStripeAccount(id) {
                return stripeLiaisonForPlatform.accounts.retrieve(id);
            }
            return { ...auth, ...common, getStripeAccount };
        }
    };
    /** a customer is a user who buys things */
    const customer = {
        async processAuth(meta, request) {
            const auth = await authPolicies.user.processAuth(meta, request);
            const common = await commonAuthProcessing(auth.tables, auth.access.appId);
            const { stripeAccountId } = await common.tables.merchant
                .stripeAccounts
                .one({ conditions: false });
            const stripeLiaisonForApp = stripeComplex
                .connectStripeLiaisonForApp(stripeAccountId);
            return {
                ...auth,
                ...common,
                stripeLiaisonForApp,
            };
        }
    };
    /** a clerk edits products and subscriptions */
    const clerk = {
        async processAuth(meta, request) {
            const auth = await customer.processAuth(meta, request);
            auth.checker.requirePrivilege("manage store");
            return auth;
        }
    };
    return { merchant, prospect, customer, clerk };
}
//# sourceMappingURL=store-policies.js.map