export function mockStripeInitializers({ rando }) {
    const generateId = () => rando.randomId();
    return {
        sessionForSubscriptionPurchase({ userId, customer, subscription, }) {
            return {
                id: generateId(),
                mode: "subscription",
                customer: customer.id,
                client_reference_id: userId,
                // TODO check modern technique in stripe docs
                subscription: subscription.id,
                line_items: undefined,
            };
        },
        sessionForSubscriptionUpdate({ userId, customer, setupIntent, subscriptionId, }) {
            return {
                id: generateId(),
                mode: "setup",
                customer: customer.id,
                client_reference_id: userId,
                setup_intent: setupIntent.id,
                metadata: {
                    flow: "update-subscription",
                    customer_id: customer.id,
                    subscription_id: subscriptionId,
                },
            };
        },
        account() {
            return {
                id: generateId(),
                email: "",
                type: "standard",
                charges_enabled: false,
                details_submitted: false,
                payouts_enabled: false,
            };
        },
        customer() {
            return {
                id: generateId(),
            };
        },
        paymentMethod() {
            return {
                id: generateId(),
                card: {
                    brand: "FAKEVISA",
                    country: "US",
                    exp_year: 2020,
                    exp_month: 10,
                    last4: rando.randomSequence(4, [..."0123456789"]),
                    description: "description",
                    funding: "credit",
                    checks: undefined,
                    wallet: undefined,
                    networks: undefined,
                    three_d_secure_usage: undefined,
                },
            };
        },
        setupIntentForSubscription({ customer, subscription, paymentMethod }) {
            return {
                id: generateId(),
                customer: customer.id,
                payment_method: paymentMethod.id,
                metadata: {
                    subscription_id: subscription.id
                },
            };
        },
        subscription({ planId, customer, paymentMethod, timeframeEnd }) {
            return {
                id: generateId(),
                status: "active",
                // TODO fix this!
                // plan: {id: planId},
                customer: customer.id,
                cancel_at_period_end: false,
                current_period_end: timeframeEnd,
                default_payment_method: paymentMethod.id,
            };
        },
    };
}
//# sourceMappingURL=mock-stripe-recreation.js.map