import { stripeWebhooks } from "../stripe-webhooks.js";
import { mockStripeComplex } from "./mock-stripe-complex.js";
import { pubsub, pubsubs } from "../../../../toolbox/pubsub.js";
import { find } from "../../../../toolbox/dbby/dbby-helpers.js";
import { mockStripeTables } from "./tables/mock-stripe-tables.js";
export async function mockStripeCircuit({ rando, tableStorage, tables: xiomeTables, }) {
    const { publishers: webhookPublishers, subscribers: webhookSubscribers, } = pubsubs({
        "checkout.session.completed": pubsub(),
        "invoice.paid": pubsub(),
        "invoice.payment_failed": pubsub(),
        "customer.subscription.updated": pubsub(),
    });
    const stripeTables = await mockStripeTables({ tableStorage });
    const stripeComplex = mockStripeComplex({
        rando,
        tables: stripeTables,
        webhooks: webhookPublishers,
    });
    const webhooks = stripeWebhooks({
        stripeComplex,
        logger: console,
        tables: xiomeTables,
    });
    for (const [key, subscribe] of Object.entries(webhookSubscribers))
        subscribe(webhooks[key].bind(webhooks));
    return {
        stripeComplex,
        mockStripeOperations: {
            linkBankWithExistingStripeAccount: async (stripeAccountId) => {
                await stripeTables.accounts.update({
                    ...find({ id: stripeAccountId }),
                    write: {
                        payouts_enabled: true,
                        details_submitted: true,
                    },
                });
            },
        },
    };
}
//# sourceMappingURL=mock-stripe-circuit.js.map