import { Policy } from "renraku/x/types/primitives/policy.js";
import { GreenAuth } from "./types/green-auth.js";
import { AnonAuth } from "./types/anon-auth.js";
import { AnonMeta } from "./types/anon-meta.js";
import { UserAuth } from "./types/user-auth.js";
import { UserMeta } from "./types/user-meta.js";
import { PlatformUserAuth } from "./types/platform-user-auth.js";
import { PlatformUserMeta } from "./types/platform-user-meta.js";
import { AppOwnerMeta } from "./types/app-owner-meta.js";
import { AppOwnerAuth } from "./types/app-owner-auth.js";
import { AuthPolicyOptions } from "./types/auth-policy-options.js";
export declare function prepareAuthPolicies({ config, tables, verifyToken, }: AuthPolicyOptions): {
    green: Policy<undefined, GreenAuth, import("renraku/x/types/http/http-request").HttpRequest>;
    anon: Policy<AnonMeta, AnonAuth, import("renraku/x/types/http/http-request").HttpRequest>;
    user: Policy<UserMeta, UserAuth, import("renraku/x/types/http/http-request").HttpRequest>;
    appOwner: Policy<AppOwnerMeta, AppOwnerAuth, import("renraku/x/types/http/http-request").HttpRequest>;
    platformUser: Policy<PlatformUserMeta, PlatformUserAuth, import("renraku/x/types/http/http-request").HttpRequest>;
    userWhoManagesPermissions: Policy<UserMeta, UserAuth, import("renraku/x/types/http/http-request").HttpRequest>;
};
