import { ApiError } from "renraku/x/api/api-error.js";
import { and, find } from "../../../toolbox/dbby/dbby-mongo.js";
import { day, month } from "../../../toolbox/goodtimes/times.js";
import { namespaceKeyAppId } from "../tables/constants/namespace-key-app-id.js";
export function prepareStatsHub({ tables }) {
    return async function getStatsHub(userId) {
        async function throwForbiddenUser(appId) {
            const row = await tables.app.appOwnership.one(find({ appId }));
            if (row.userId !== userId)
                throw new ApiError(403, "forbidden");
        }
        function exposeNamespacing(table) {
            return table;
        }
        return {
            countUsers: async (appId) => {
                await throwForbiddenUser(appId);
                return exposeNamespacing(tables.user.account)
                    .count(find({ [namespaceKeyAppId]: appId }));
            },
            countUsersActiveDaily: async (appId) => {
                await throwForbiddenUser(appId);
                const timeToStartCounting = Date.now() - day;
                return exposeNamespacing(tables.user.latestLogin)
                    .count({
                    conditions: and({ equal: { _appId: appId } }, { greater: { time: timeToStartCounting } })
                });
            },
            countUsersActiveMonthly: async (appId) => {
                await throwForbiddenUser(appId);
                const timeToStartCounting = Date.now() - month;
                return exposeNamespacing(tables.user.latestLogin)
                    .count({
                    conditions: and({ equal: { _appId: appId } }, { greater: { time: timeToStartCounting } })
                });
            },
        };
    };
}
//# sourceMappingURL=prepare-stats-hub.js.map