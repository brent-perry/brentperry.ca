import { asApi } from "renraku/x/identities/as-api.js";
import { apiContext } from "renraku/x/api/api-context.js";
import { appTopic } from "./topics/app-topic.js";
import { userTopic } from "./topics/user-topic.js";
import { loginTopic } from "./topics/login-topic.js";
import { personalTopic } from "./topics/personal-topic.js";
import { greenTopic } from "./topics/green-topic.js";
import { permissionsTopic } from "./topics/permissions-topic.js";
import { manageAdminsTopic } from "./topics/manage-admins-topic.js";
import { appEditTopic } from "./topics/app-edit-topic.js";
export const makeAuthApi = ({ tables, authPolicies, ...options }) => {
    return asApi({
        greenService: apiContext()({
            policy: authPolicies.green,
            expose: greenTopic(options),
        }),
        loginService: apiContext()({
            policy: authPolicies.anon,
            expose: loginTopic(options),
        }),
        appService: apiContext()({
            policy: authPolicies.platformUser,
            expose: appTopic(options),
        }),
        appEditService: apiContext()({
            policy: authPolicies.appOwner,
            expose: appEditTopic(options),
        }),
        manageAdminsService: apiContext()({
            policy: authPolicies.appOwner,
            expose: manageAdminsTopic(options),
        }),
        personalService: apiContext()({
            policy: authPolicies.user,
            expose: personalTopic(options),
        }),
        userService: apiContext()({
            policy: authPolicies.anon,
            expose: userTopic(options),
        }),
        permissionsService: apiContext()({
            policy: authPolicies.userWhoManagesPermissions,
            expose: permissionsTopic(options),
        }),
    });
};
//# sourceMappingURL=auth-api.js.map