import { AuthTables } from "./tables/types/auth-tables.js";
import { prepareAuthPolicies } from "./policies/prepare-auth-policies.js";
import { PlatformUserAuth } from "./policies/types/platform-user-auth.js";
import { PlatformUserMeta } from "./policies/types/platform-user-meta.js";
import { UserAuth } from "./policies/types/user-auth.js";
import { UserMeta } from "./policies/types/user-meta.js";
import { AnonAuth } from "./policies/types/anon-auth.js";
import { AnonMeta } from "./policies/types/anon-meta.js";
import { GreenAuth } from "./policies/types/green-auth.js";
import { AuthApiOptions } from "./types/auth-api-options.js";
import { AppOwnerMeta } from "./policies/types/app-owner-meta.js";
import { AppOwnerAuth } from "./policies/types/app-owner-auth.js";
export declare const makeAuthApi: ({ tables, authPolicies, ...options }: {
    tables: AuthTables;
    authPolicies: ReturnType<typeof prepareAuthPolicies>;
} & AuthApiOptions) => {
    greenService: import("renraku/x/types/api/to-api-context").ToApiContext<undefined, GreenAuth, {
        authorize({ bakeTables }: GreenAuth, { appId, scope, refreshToken }: {
            scope: import("./types/tokens/scope.js").Scope;
            appId: string;
            refreshToken?: string;
        }): Promise<string>;
    }, import("renraku/x/types/primitives/policy").Policy<undefined, GreenAuth, import("renraku/x/types/http/http-request").HttpRequest>>;
    loginService: import("renraku/x/types/api/to-api-context").ToApiContext<AnonMeta, AnonAuth, {
        sendLoginLink({ access, tables }: AnonAuth, { email }: {
            email: string;
        }): Promise<void>;
        authenticateViaLoginToken({ tables, access }: AnonAuth, { loginToken }: {
            loginToken: string;
        }): Promise<import("../../toolbox/concurrent.js").AwaitProps<{
            accessToken: Promise<string>;
            refreshToken: Promise<string>;
        }>>;
    }, import("renraku/x/types/primitives/policy").Policy<AnonMeta, AnonAuth, import("renraku/x/types/http/http-request").HttpRequest>>;
    appService: import("renraku/x/types/api/to-api-context").ToApiContext<PlatformUserMeta, PlatformUserAuth, {
        listApps({ tables, statsHub }: PlatformUserAuth, { ownerUserId }: {
            ownerUserId: string;
        }): Promise<import("./types/apps/app-display.js").AppDisplay[]>;
        registerApp({ tables }: PlatformUserAuth, { appDraft, ownerUserId }: {
            appDraft: import("./types/apps/app-draft.js").AppDraft;
            ownerUserId: string;
        }): Promise<import("./types/apps/app-display.js").AppDisplay>;
    }, import("renraku/x/types/primitives/policy").Policy<PlatformUserMeta, PlatformUserAuth, import("renraku/x/types/http/http-request").HttpRequest>>;
    appEditService: import("renraku/x/types/api/to-api-context").ToApiContext<AppOwnerMeta, AppOwnerAuth, {
        updateApp({ tables, access }: AppOwnerAuth, { appId, appDraft }: {
            appId: string;
            appDraft: import("./types/apps/app-draft.js").AppDraft;
        }): Promise<void>;
        deleteApp({ tables, access }: AppOwnerAuth, { appId }: {
            appId: string;
        }): Promise<void>;
    }, import("renraku/x/types/primitives/policy").Policy<AppOwnerMeta, AppOwnerAuth, import("renraku/x/types/http/http-request").HttpRequest>>;
    manageAdminsService: import("renraku/x/types/api/to-api-context").ToApiContext<AppOwnerMeta, AppOwnerAuth, {
        listAdmins(auth: AppOwnerAuth, { appId }: {
            appId: string;
        }): Promise<import("./types/manage-admins/admin-email-display.js").AdminEmailDisplay[]>;
        assignPlatformUserAsAdmin(auth: AppOwnerAuth, { appId, platformUserId }: {
            appId: string;
            platformUserId: string;
        }): Promise<void>;
        assignAdmin(auth: AppOwnerAuth, { appId, email }: {
            appId: string;
            email: string;
        }): Promise<void>;
        revokeAdmin(auth: AppOwnerAuth, { appId, userId }: {
            appId: string;
            userId: string;
        }): Promise<void>;
    }, import("renraku/x/types/primitives/policy").Policy<AppOwnerMeta, AppOwnerAuth, import("renraku/x/types/http/http-request").HttpRequest>>;
    personalService: import("renraku/x/types/api/to-api-context").ToApiContext<UserMeta, UserAuth, {
        setProfile({ access, tables, checker }: UserAuth, { userId, profileDraft }: {
            userId: string;
            profileDraft: import("./topics/personal/types/profile-draft.js").ProfileDraft;
        }): Promise<void>;
    }, import("renraku/x/types/primitives/policy").Policy<UserMeta, UserAuth, import("renraku/x/types/http/http-request").HttpRequest>>;
    userService: import("renraku/x/types/api/to-api-context").ToApiContext<AnonMeta, AnonAuth, {
        getUser({ tables, access }: AnonAuth, { userId }: {
            userId: string;
        }): Promise<{
            userId: string;
            profile: import("./types/profile.js").Profile;
            roles: import("./types/public-user-role.js").PublicUserRole[];
            stats: import("./types/user-stats.js").UserStats;
        }>;
    }, import("renraku/x/types/primitives/policy").Policy<AnonMeta, AnonAuth, import("renraku/x/types/http/http-request").HttpRequest>>;
    permissionsService: import("renraku/x/types/api/to-api-context").ToApiContext<UserMeta, UserAuth, {
        fetchPermissions({ tables, access }: UserAuth): Promise<import("../../toolbox/concurrent.js").AwaitProps<{
            roles: Promise<import("./tables/types/rows/role-row.js").RoleRow[]>;
            privileges: Promise<import("./tables/types/rows/privilege-row.js").PrivilegeRow[]>;
            rolesHavePrivileges: Promise<import("./tables/types/rows/role-has-privilege-row.js").RoleHasPrivilegeRow[]>;
        }>>;
        createRole({ tables }: UserAuth, { label }: {
            label: string;
        }): Promise<void>;
        deleteRole({ tables }: UserAuth, { roleId }: {
            roleId: string;
        }): Promise<void>;
        assignPrivilege({ tables }: UserAuth, { roleId, privilegeId }: {
            roleId: string;
            privilegeId: string;
        }): Promise<void>;
        unassignPrivilege({ tables }: UserAuth, { roleId, privilegeId }: {
            roleId: string;
            privilegeId: string;
        }): Promise<void>;
    }, import("renraku/x/types/primitives/policy").Policy<UserMeta, UserAuth, import("renraku/x/types/http/http-request").HttpRequest>>;
};
