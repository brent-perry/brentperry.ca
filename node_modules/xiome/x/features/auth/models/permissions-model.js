import { ops } from "../../../framework/ops.js";
import { happystate } from "../../../toolbox/happystate/happystate.js";
import { appPermissions } from "../../../assembly/backend/permissions2/standard-permissions.js";
export function makePermissionsModel({ permissionsService, reauthorize, }) {
    const { getState, actions, onStateChange } = happystate({
        state: {
            active: false,
            access: undefined,
            permissionsDisplay: ops.none(),
        },
        actions: state => ({
            setActive(active) {
                state.active = active;
            },
            setPermissionsDisplay(op) {
                state.permissionsDisplay = op;
            },
            setAccess(access) {
                state.access = access;
            },
        }),
    });
    async function reload() {
        await ops.operation({
            promise: Promise.resolve()
                .then(async () => getUserCanCustomizePermissions()
                ? permissionsService.fetchPermissions()
                : undefined),
            setOp: op => actions.setPermissionsDisplay(op),
        });
    }
    function getUserCanCustomizePermissions() {
        const { access } = getState();
        return access?.user
            ? access.permit.privileges.includes(appPermissions.privileges["customize permissions"])
            : false;
    }
    async function initialize() {
        actions.setActive(true);
        if (getUserCanCustomizePermissions())
            await reload();
    }
    function reloadAfter(func) {
        return (async (...args) => {
            const result = await func(...args);
            await reload();
            await reauthorize();
            return result;
        });
    }
    return {
        onStateChange,
        getState,
        initialize,
        getUserCanCustomizePermissions,
        createRole: reloadAfter(permissionsService.createRole),
        deleteRole: reloadAfter(permissionsService.deleteRole),
        assignPrivilege: reloadAfter(permissionsService.assignPrivilege),
        unassignPrivilege: reloadAfter(permissionsService.unassignPrivilege),
        async accessChange(access) {
            actions.setAccess(access);
            if (access?.user && getState().active)
                await reload();
        },
    };
}
//# sourceMappingURL=permissions-model.js.map