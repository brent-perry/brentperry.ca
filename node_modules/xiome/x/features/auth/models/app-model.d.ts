import { Op } from "../../../framework/ops.js";
import { AppDraft } from "../types/apps/app-draft.js";
import { AppRecords } from "./types/app/app-records.js";
import { AppDisplay } from "../types/apps/app-display.js";
import { AppModelOptions } from "./types/app/app-model-options.js";
export declare function makeAppModel({ appService, appEditService, manageAdminsService, getAccess, }: AppModelOptions): {
    readonly state: {
        active: boolean;
        appRecords: Op<AppRecords>;
        addingNewApp: Op<null>;
    };
    getApp(appId: string): AppDisplay;
    onStateChange: import("../../../toolbox/pubsub.js").Subscribe<import("../../../toolbox/pubsub.js").AnyListener>;
    loadApps: () => Promise<AppDisplay[]>;
    deleteApp: (appId: string) => Promise<void>;
    updateApp: (appId: string, appDraft: AppDraft) => Promise<void>;
    registerApp: (appDraft: AppDraft) => Promise<AppDisplay>;
    manageAdminsService: import("renraku/x/types/primitives/business").Business<{
        listAdmins(auth: import("../policies/types/app-owner-auth.js").AppOwnerAuth, { appId }: {
            appId: string;
        }): Promise<import("../types/manage-admins/admin-email-display.js").AdminEmailDisplay[]>;
        assignPlatformUserAsAdmin(auth: import("../policies/types/app-owner-auth.js").AppOwnerAuth, { appId, platformUserId }: {
            appId: string;
            platformUserId: string;
        }): Promise<void>;
        assignAdmin(auth: import("../policies/types/app-owner-auth.js").AppOwnerAuth, { appId, email }: {
            appId: string;
            email: string;
        }): Promise<void>;
        revokeAdmin(auth: import("../policies/types/app-owner-auth.js").AppOwnerAuth, { appId, userId }: {
            appId: string;
            userId: string;
        }): Promise<void>;
    }>;
    accessChange(): Promise<void>;
};
