import { UserAuth } from "../policies/types/user-auth.js";
import { AuthApiOptions } from "../types/auth-api-options.js";
export declare const permissionsTopic: ({ config, rando }: AuthApiOptions) => {
    fetchPermissions({ tables, access }: UserAuth): Promise<import("../../../toolbox/concurrent.js").AwaitProps<{
        roles: Promise<import("../tables/types/rows/role-row.js").RoleRow[]>;
        privileges: Promise<import("../tables/types/rows/privilege-row.js").PrivilegeRow[]>;
        rolesHavePrivileges: Promise<import("../tables/types/rows/role-has-privilege-row.js").RoleHasPrivilegeRow[]>;
    }>>;
    createRole({ tables }: UserAuth, { label }: {
        label: string;
    }): Promise<void>;
    deleteRole({ tables }: UserAuth, { roleId }: {
        roleId: string;
    }): Promise<void>;
    assignPrivilege({ tables }: UserAuth, { roleId, privilegeId }: {
        roleId: string;
        privilegeId: string;
    }): Promise<void>;
    unassignPrivilege({ tables }: UserAuth, { roleId, privilegeId }: {
        roleId: string;
        privilegeId: string;
    }): Promise<void>;
};
