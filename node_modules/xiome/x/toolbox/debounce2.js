export function debounce2(delay, action) {
    let latestArgs;
    let timeout;
    return ((...args) => {
        latestArgs = args;
        if (!timeout) {
            const operation = () => {
                action(...latestArgs);
                timeout = undefined;
            };
            timeout = setTimeout(operation, delay);
        }
    });
}
export function debounce3(delay, action) {
    let latestArgs;
    let timeout;
    let promise;
    let resolve;
    let reject;
    function reset() {
        latestArgs = undefined;
        timeout = undefined;
        promise = new Promise((res, rej) => {
            resolve = res;
            reject = rej;
        });
    }
    reset();
    return ((...args) => {
        latestArgs = args;
        if (!timeout) {
            const operation = () => {
                timeout = undefined;
                Promise.resolve(action(...latestArgs))
                    .then(r => {
                    if (!timeout)
                        resolve(r);
                })
                    .catch(err => {
                    if (!timeout)
                        reject(err);
                })
                    .finally(() => {
                    if (!timeout)
                        reset();
                });
            };
            timeout = setTimeout(operation, delay);
        }
        return promise;
    });
}
//# sourceMappingURL=debounce2.js.map