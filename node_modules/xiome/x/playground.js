var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { nap } from "./toolbox/nap.js";
import { ops } from "./framework/ops.js";
import { Component2, mixinLightDom, registerComponents, html, property } from "./framework/component2/component2.js";
let XioPlayground = class XioPlayground extends Component2 {
    constructor() {
        super(...arguments);
        this.user = {
            userId: "8NSpzxSPHkgWfD79y2D96zZzhSrT2gbxDsxnpNGkGYpxwSSn",
            profile: {
                nickname: "Original Ostrich",
                tagline: "i'm super cool",
                avatar: undefined,
            },
            roles: [{
                    label: "premium",
                    roleId: "lol12i309u12893h1",
                    timeframeEnd: undefined,
                    timeframeStart: undefined,
                }],
            stats: {
                joined: Date.now() - (1000 * 60 * 60 * 24 * 365),
            },
        };
        this.saveProfile = async (profileDraft) => {
            await nap(1000);
            this.user = {
                ...this.user,
                profile: { ...this.user.profile, ...profileDraft },
            };
            this.requestUpdate();
        };
    }
    render() {
        const { user } = this;
        return html `

			<p class=lowkey>xiome-questions</p>
			<xiome-questions></xiome-questions>

			<p class=lowkey>xio-profile-card: readonly</p>
			<xio-profile-card show-details .user=${user}></xio-profile-card>

			<p class=lowkey>xio-profile-card: editable</p>
			<xio-profile-card
				show-details
				.user=${user}
				.saveProfile=${this.saveProfile}
			></xio-profile-card>

			<p class=lowkey>xio-op</p>
			<xio-op .op=${ops.loading()}></xio-op>
		`;
    }
};
__decorate([
    property({ type: Object })
], XioPlayground.prototype, "user", void 0);
XioPlayground = __decorate([
    mixinLightDom
], XioPlayground);
registerComponents({ XioPlayground });
//# sourceMappingURL=playground.js.map