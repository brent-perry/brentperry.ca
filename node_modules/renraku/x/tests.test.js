import { assert } from "cynic";
import { apiContext } from "./api/api-context.js";
import { asShape } from "./identities/as-shape.js";
import { asTopic } from "./identities/as-topic.js";
import { toBusiness } from "./transforms/to-business.js";
import { jsonHttpRequest } from "./jsonrpc/json-http-request.js";
import { loopbackJsonRemote } from "./remote/loopback-json-remote.js";
import { noServeletLogger } from "./servelet/logger/no-servelet-logger.js";
import { makeJsonHttpServelet } from "./servelet/make-json-http-servelet.js";
import { _augment } from "./types/symbols/augment-symbol.js";
const goodLink = "http://localhost:5000/";
export default {
    "make a servelet and execute a loopback procedure": async () => {
        const alpha = asTopic()({
            async sum(auth, x, y) {
                return x + y;
            },
        });
        const bravo = asTopic()({
            async divide(auth, x, y) {
                return x / y;
            },
        });
        const alphaPolicy = {
            processAuth: async (meta, request) => ({ access: true })
        };
        const bravoPolicy = {
            processAuth: async (meta, request) => ({ tables: true })
        };
        const createContext = () => ({
            alpha: apiContext()({
                policy: alphaPolicy,
                expose: alpha,
            }),
            bravo: apiContext()({
                policy: bravoPolicy,
                expose: bravo,
            }),
            group: {
                alpha2: apiContext()({
                    policy: alphaPolicy,
                    expose: alpha,
                })
            },
        });
        ////////
        const alphaAugment = {
            getMeta: async () => ({ token: "t123" })
        };
        const bravoAugment = {
            getMeta: async () => ({ abc: "abc" })
        };
        const myShape = asShape({
            alpha: {
                [_augment]: alphaAugment,
                sum: true,
            },
            bravo: {
                [_augment]: bravoAugment,
                divide: true,
            },
            group: {
                alpha2: {
                    [_augment]: alphaAugment,
                    sum: true,
                }
            },
        });
        ////////
        const servelet = makeJsonHttpServelet(createContext(), noServeletLogger());
        const r0 = await servelet(jsonHttpRequest({
            link: goodLink,
            meta: { token: "t123" },
            headers: {},
            specifier: "alpha.sum",
            args: [1, 2],
        }));
        assert(r0.status === 200, "direct servelet request status not 200");
        const myRemote = loopbackJsonRemote({
            servelet,
            link: goodLink,
            shape: myShape,
            headers: { origin: "http://localhost:5000" },
        });
        const r1 = await myRemote.alpha.sum(1, 2);
        const r2 = await myRemote.group.alpha2.sum(2, 3);
        assert(r1 === 3, "r1 must be 3");
        assert(r2 === 5, "r2 must be 5");
        ////////
        const mockAlpha = toBusiness()({
            topic: alpha,
            getAuth: async () => ({ access: true }),
        });
        const m1 = await mockAlpha.sum(4, 5);
        assert(m1, "m1 must be 9");
    },
};
//# sourceMappingURL=tests.test.js.map