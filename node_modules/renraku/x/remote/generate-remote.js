import { objectMap } from "../tools/object-map.js";
import { isObject } from "../identities/is-object.js";
import { isShapeContext } from "../identities/is-shape-context.js";
import { _augment } from "../types/symbols/augment-symbol.js";
export function generateRemote({ link, shape, specpath = [], requester, }) {
    return objectMap(shape, (value, key) => {
        if (isShapeContext(value)) {
            const { getMeta } = value[_augment];
            function recurseOverContext(shapeContext, subpath = []) {
                return objectMap(shapeContext, (value2, key2) => {
                    if (value2 === true) {
                        return async (...args) => {
                            const specifier = [...specpath, ...subpath, key, key2].join(".");
                            const meta = await getMeta();
                            const result = await requester({
                                link,
                                args,
                                meta,
                                specifier,
                            });
                            return result;
                        };
                    }
                    else if (isObject(value2)) {
                        return recurseOverContext(value2, [...subpath, key2]);
                    }
                });
            }
            return recurseOverContext(value);
        }
        else if (isObject(value)) {
            return generateRemote({
                link,
                shape: value,
                specpath: [...specpath, key],
                requester,
            });
        }
    });
}
//# sourceMappingURL=generate-remote.js.map