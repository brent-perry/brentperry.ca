import { obtain } from "../tools/obtain.js";
import { ApiError } from "../api/api-error.js";
import { isApiError } from "../identities/is-api-error.js";
import { stopwatch } from "../tools/stopwatch.js";
import { serveletLoggerPlain } from "./logger/servelet-logger-plain.js";
export function makeServelet({ expose, responder, serveletLogger = serveletLoggerPlain(console), parseRequest, }) {
    return async function execute(request) {
        let errorRequestId;
        try {
            const totalClock = stopwatch();
            const { requestId, specifier, meta, args } = await parseRequest(request);
            errorRequestId = requestId;
            const { func, policy } = obtain(specifier, expose);
            const times = {
                auth: -1,
                procedure: -1,
                total: -1,
            };
            const authClock = stopwatch();
            const auth = await policy.processAuth(meta, request);
            times.auth = authClock();
            const procedureClock = stopwatch();
            const result = await func(auth, ...args);
            times.procedure = procedureClock();
            const response = responder.resultResponse(requestId, result);
            times.total = totalClock();
            serveletLogger.logRequest({ specifier, meta, args, times, result });
            return response;
        }
        catch (error) {
            if (isApiError(error)) {
                serveletLogger.logApiError(error);
                return responder.errorResponse(errorRequestId, error);
            }
            else {
                serveletLogger.logUnexpectedError(error);
                return responder.errorResponse(errorRequestId, new ApiError(500, "error"));
            }
        }
    };
}
//# sourceMappingURL=make-servelet.js.map