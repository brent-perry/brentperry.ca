import { asApi } from "../identities/as-api.js";
import { apiContext } from "../api/api-context.js";
import { asShape } from "../identities/as-shape.js";
import { asTopic } from "../identities/as-topic.js";
import { _augment } from "../types/symbols/augment-symbol.js";
// exposed api functionality
export const greeterTopic = asTopic()({
    async sayHello(auth, name) {
        if (auth.doctorate)
            return `Hello Dr. ${name}, welcome!`;
        else
            return `Hello ${name}, welcome!`;
    },
    async sayGoodbye(auth, name) {
        if (auth.doctorate)
            return `Goodbye Dr. ${name}, see you later.`;
        else
            return `Goodbye ${name}, see you later.`;
    },
});
// api configured with an meta policy
export const exampleApi = () => asApi({
    greeter: apiContext()({
        expose: greeterTopic,
        policy: { processAuth: async (meta, request) => ({ doctorate: meta.token === "abc" }) },
    })
});
// shape for generating remotes specifies meta
export const exampleShape = asShape({
    greeter: {
        [_augment]: { getMeta: async () => ({ token: "abc" }) },
        sayHello: true,
        sayGoodbye: true,
    }
});
//# sourceMappingURL=example-api.js.map